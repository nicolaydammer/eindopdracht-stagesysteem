'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _ErrorText = require('./ErrorText');

var _ErrorText2 = _interopRequireDefault(_ErrorText);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LoginForm = function (_React$Component) {
  _inherits(LoginForm, _React$Component);

  function LoginForm(props, context) {
    _classCallCheck(this, LoginForm);

    var _this = _possibleConstructorReturn(this, (LoginForm.__proto__ || Object.getPrototypeOf(LoginForm)).call(this, props, context));

    _this.state = {
      Username: '',
      Password: '',
      remember: false,
      error: {}
    };

    _this.handleLogin = _this.handleLogin.bind(_this);
    _this.handleCheck = _this.handleCheck.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(LoginForm, [{
    key: 'handleLogin',
    value: function handleLogin() {
      this.setState({
        error: {}
      });

      var _state = this.state,
          Username = _state.Username,
          Password = _state.Password,
          isRemember = _state.isRemember;


      return this.props.onSubmit(Username, Password, isRemember);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // $('input').iCheck({
      //   checkboxClass: 'icheckbox_square-blue',
      //   radioClass: 'iradio_square-blue',
      //   increaseArea: '20%' // optional
      // });
    }
  }, {
    key: 'handleChange',
    value: function handleChange(name, e) {
      this.setState(_defineProperty({}, name, e.target.value));
    }
  }, {
    key: 'handleCheck',
    value: function handleCheck() {
      this.setState({
        remember: !this.state.remember
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var usernameOptions = {
        maxLength: 40,
        placeholder: 'Email',
        type: 'email',
        containerClassName: 'input-container'
      };

      var passwordOptions = {
        maxLength: 40,
        placeholder: 'Password',
        type: 'password',
        containerClassName: 'input-container'
      };

      var formOptions = {
        className: 'login-form'
      };

      var i18n = {
        rememberMe: 'Remember Me',
        submitLabel: 'Sign In'
      };

      if (this.props.username) {
        usernameOptions = Object.assign(usernameOptions, this.props.username);
      }

      if (this.props.password) {
        passwordOptions = Object.assign(passwordOptions, this.props.password);
      }

      if (this.props.form) {
        formOptions = Object.assign(formOptions, this.props.form);
      }

      if (this.props.text) {
        i18n = Object.assign(i18n, this.props.text);
      }

      return _react2.default.createElement(
        'form',
        { action: 'javascript:void(0)', noValidate: true, onSubmit: this.handleLogin, className: formOptions.className },
        _react2.default.createElement(
          'div',
          { className: usernameOptions.containerClassName },
          _react2.default.createElement('input', {
            maxLength: usernameOptions.maxLength,
            placeholder: usernameOptions.placeholder,
            autoComplete: 'off',
            className: usernameOptions.className,
            onChange: function onChange(e) {
              return _this2.handleChange('Username', e);
            },
            type: usernameOptions.type
          }),
          _react2.default.createElement(_ErrorText2.default, { errText: this.state.error.email }),
          _react2.default.createElement('span', { className: 'glyphicon glyphicon-envelope ' })
        ),
        _react2.default.createElement(
          'div',
          { className: passwordOptions.containerClassName },
          _react2.default.createElement('input', {
            autoComplete: 'off',
            className: passwordOptions.className,
            maxLength: 40,
            name: 'Password',
            onChange: function onChange(e) {
              return _this2.handleChange('Password', e);
            },
            placeholder: passwordOptions.placeholder,
            type: 'password'
          }),
          _react2.default.createElement(_ErrorText2.default, { errText: this.state.error.password }),
          _react2.default.createElement('span', { className: 'glyphicon glyphicon-lock' })
        ),
        _react2.default.createElement(
          'div',
          { style: {
              content: ' ',
              marginRight: -15,
              marginLeft: -15
            }
          },
          _react2.default.createElement(
            'div',
            { className: 'remember-container' },
            _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(
                'label',
                { htmlFor: 'remember' },
                _react2.default.createElement('input', {
                  id: 'remember',
                  checked: this.state.remember,
                  onChange: this.handleCheck,
                  type: 'checkbox'
                }),
                ' ',
                i18n.rememberMe
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'button-container' },
            _react2.default.createElement(
              'button',
              { type: 'submit', className: 'btnSubmit' },
              i18n.submitLabel
            )
          )
        )
      );
    }
  }]);

  return LoginForm;
}(_react2.default.Component);

LoginForm.propTypes = process.env.NODE_ENV !== "production" ? {
  username: _propTypes.PropTypes.object,
  password: _propTypes.PropTypes.object,
  form: _propTypes.PropTypes.object,
  text: _propTypes.PropTypes.object,
  onSubmit: _propTypes.PropTypes.func.isRequired
} : {};

LoginForm.defaultProps = {
  username: {},
  password: {}
};

exports.default = LoginForm;